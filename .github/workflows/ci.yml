name: CI

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Deps (clang-format, clang-tidy)
        run: sudo apt-get install -y clang-format clang-tidy

      - name: Run clang-format
        run: clang-format -i test_steve.c
        continue-on-error: true

      - name: Check for changes
        run: git diff --exit-code

      - name: Run clang-tidy
        run: clang-tidy test_steve.c -- -std=c11 -Wall -Wextra -Werror -Wconversion

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang, msvc]
        c_standard: [c11, c17]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Deps (gcc)
        if: matrix.compiler == 'gcc'
        shell: powershell
        run: choco install mingw --version=8.1.0 -y

      - name: Deps (clang)
        if: matrix.compiler == 'clang'
        shell: powershell
        run: choco install llvm -y

      - name: Deps (msvc)
        if: matrix.compiler == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build and run (gcc)
        if: matrix.compiler == 'gcc'
        env:
          C_STANDARD: ${{ matrix.c_standard }}
        run: |
          gcc "-std=$Env:C_STANDARD" -Wall -Wextra -Werror -Wconversion test_steve.c -o test_steve.exe
          .\test_steve.exe

      - name: Build and run (clang)
        if: matrix.compiler == 'clang'
        env:
          C_STANDARD: ${{ matrix.c_standard }}
        run: |
          clang "-std=$Env:C_STANDARD" -Wall -Wextra -Werror -Wconversion -fsanitize=address -fno-omit-frame-pointer test_steve.c -o test_steve.exe
          .\test_steve.exe

      - name: Build and run (msvc)
        if: matrix.compiler == 'msvc'
        shell: powershell
        env:
          CC: ${{ matrix.compiler }}
          C_STANDARD: ${{ matrix.c_standard }}
        run: |
          $msvcStdFlag = ""
          switch ($Env:C_STANDARD) {
            "c11" { $msvcStdFlag = "/std:c11" }
            "c17" { $msvcStdFlag = "/std:c17" }
          }

          cl $msvcStdFlag test_steve.c /Fe:test_steve.exe
          .\test_steve.exe

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        c_standard: [c11, c17]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Deps (gcc)
        if: matrix.compiler == 'gcc'
        run: brew install -q gcc

      - name: Build and run (gcc)
        if: matrix.compiler == 'gcc'
        run: |
          gcc-14 -std=${{ matrix.c_standard }} -Wall -Wextra -Werror -Wconversion test_steve.c -o test_steve
          ./test_steve

      - name: Build and run (clang)
        if: matrix.compiler == 'clang'
        env:
          MallocNanoZone: 0
        run: |
          clang -std=${{ matrix.c_standard }} -Wall -Wextra -Werror -Wconversion -fsanitize=address -fno-omit-frame-pointer test_steve.c -o test_steve
          ./test_steve

  linux:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        c_standard: [c11, c17]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Deps (gcc)
        if: matrix.compiler == 'gcc'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Deps (clang)
        if: matrix.compiler == 'clang'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Build and run (gcc/clang)
        run: |
          ${{ matrix.compiler }} -std=${{ matrix.c_standard }} -Wall -Wextra -Werror -Wconversion -fsanitize=address -fno-omit-frame-pointer test_steve.c -o test_steve
          ./test_steve
